#!/bin/bash

set -eu

# applies a basic nftables firewall for a desktop linux pc, installs nftables, enables the service
# allows http,https, dns, dns over tls, ntp and ntpsec, and outbound pings
# meant to be absolutely bare bones, the config is stored in nftables.conf
# edit this file:

#if you edit this var, you may need to edit other nftables scripts
nftables_conf='/etc/nftables.conf'
rules_dir='/etc/nftables'

print_usage(){
  # shellcheck disable=SC2155
  local usage=$(cat << 'HERE' 
  
Usage: sudo ./nftables-apply ARG1

ARG1 can be:
-i or install - installs nftables
-r or restrictive - enable the restrictive firewall
-p or permissive - enable permissive firewall (allow all but log it)
-d or disable - disable firewall
-h or help - prints this help message

HERE
)
  echo "$usage"
}

#check the script runs as root user 
check_run_as_root(){
  if (( EUID != 0 )); then
    echo "This script must be run as root/sudo"
    exit 1
  fi
}

#install firewall
install_firewall(){
  apt-get -yy install nftables  
  echo "nftables package firewall enabled"
}

backup_current_rules(){
  if [ -f "${nftables_conf}" ]; then
    echo "backing up existing nftables.conf to ${nftables_conf}.backup"
    rm -rf "${nftables_conf}.backup" || true
    mv "${nftables_conf}" "${nftables_conf}.backup" || true
  fi

  if [ -d "${rules_dir}" ]; then
    echo "backing up existing rules directory to ${rules_dir}.backup"
    rm -rf "${rules_dir}.backup" || true
    mv "${rules_dir}" "${rules_dir}.backup" || true
  fi
}

#backup and replace rules with nftables.conf 
enable_restrictive_firewall(){
  backup_current_rules
  cp "nftables-restrictive.conf" "${nftables_conf}"
  cp -r "nftables" "${rules_dir}"
  nft -f "${nftables_conf}"
  systemctl enable nftables.service
  echo "restrictive firewall enabled"
}

enable_permissive_firewall(){
  backup_current_rules
  cp "nftables-permissive.conf" "${nftables_conf}"

  nft -f "${nftables_conf}"
  systemctl enable nftables.service
  echo "permissive firewall enabled"
}

#flush all rules, disable the nftables service
disable_firewall(){
  nft flush ruleset
  systemctl disable nftables.service
  echo "firewall disabled"
}

#main program counter logic
main(){
  echo "$(basename "$0") started"
  
  case $1 in
    restrictive|-r|-R)
      check_run_as_root
      enable_restrictive_firewall
      ;;
    disable|-d|-D)
      check_run_as_root
      disable_firewall
      ;;
    permissive|-p|-P)
      check_run_as_root
      enable_permissive_firewall
      ;;
    install|-i|-I)
      check_run_as_root
      install_firewall
      ;;
    *)
      print_usage
      ;;
  esac
   
  echo "$(basename "$0") finished"
  exit 0;
}

# Run program
main "${1:-'print usage'}"
