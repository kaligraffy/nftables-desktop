#!/usr/sbin/nft -f
#restrictive nftables firewall config for a desktop linux pc

#ports not to log when dropped
define dropped_no_log_ports = { 137 , 138 , 139, 1228,  1900 , 8612 , 8611 , 5678 , 4466, 57621, 17500 }

#cloud9 dns/cloudflare
define dns_servers = { 9.9.9.9 , 1.1.1.1 }

#time.cloudflare.com
define ntp_servers = { 162.159.200.123, 162.159.200.1 }

define interface_index = { wlan0, eth0 }
define in_interface_index = $interface_index
define out_interface_index = $interface_index

#flush old rules
flush ruleset

#main table
add table inet filter 

#main chains
add chain inet filter prerouting {
  type filter hook prerouting priority 0; policy accept;
  meta nftrace set 1
}

add chain inet filter input { 
  type filter hook input priority 0; policy drop; 
  meta nftrace set 1
}
add chain inet filter forward { 
  type filter hook forward priority 0; policy drop;
  meta nftrace set 1
}
add chain inet filter output { 
  type filter hook output priority 100; policy drop; 
  meta nftrace set 1
}

include "/etc/nftables/include-loopback.conf"
include "/etc/nftables/include-bootp.conf"
#include "/etc/nftables/include-inbound-ssh.conf"
include "/etc/nftables/include-outbound-http.conf"
include "/etc/nftables/include-outbound-https.conf"
include "/etc/nftables/include-outbound-dns.conf"
include "/etc/nftables/include-outbound-dns-over-tls.conf"
include "/etc/nftables/include-outbound-ntp.conf"
include "/etc/nftables/include-outbound-ntpsec.conf"
include "/etc/nftables/include-outbound-ping.conf"
#include "/etc/nftables/include-outbound-ssh.conf"
#include "/etc/nftables/include-custom-rules.conf"
#include "/etc/nftables/include-bittorrent-deluge.conf"
#include "/etc/nftables/include-dash.conf" 
#include "/etc/nftables/include-outbound-btc.conf" 
include "/etc/nftables/include-outbound-misc-icmp.conf"

#drop and counter log anything else
add rule inet filter input iif $in_interface_index \
counter \
log flags all prefix "nftables: drop inbound:" level debug \
drop

add rule inet filter output oif $out_interface_index \
counter \
log flags all prefix "nftables: drop outbound:" level debug \
drop

### arp ###
add table arp filter
add chain arp filter input {
    type filter hook input priority 0; policy accept;
}
add rule arp filter input iif $in_interface_index limit rate 10/second counter accept
add rule arp filter input iif $in_interface_index counter drop

add chain arp filter output { 
    type filter hook output priority 100; policy accept;
}
add rule arp filter output oif $in_interface_index counter accept

### nat ###
add table nat
add chain nat prerouting { 
    type nat hook prerouting priority 0; policy drop; 
}
add chain nat postrouting { 
    type nat hook postrouting priority 100; policy drop;
}
#drop udp junk ports
add rule nat prerouting \
iif $in_interface_index \
ip protocol udp udp dport $dropped_no_log_ports \
counter \
drop

#drop tcp junk ports
add rule nat prerouting \
iif $in_interface_index \
ip protocol tcp tcp dport $dropped_no_log_ports \
counter \
drop

#invalid packets in
add rule nat prerouting \
iif $in_interface_index \
ct state invalid \
counter \
log flags all prefix "nftables: invalid drop:" level debug \
limit rate 10/minute \
drop

#invalid packets out
add rule nat postrouting \
oif $out_interface_index \
ct state invalid \
counter \
log flags all prefix "nftables: invalid drop:" level debug \
limit rate 10/minute \
drop

add rule nat postrouting counter accept;
add rule nat prerouting counter accept;
